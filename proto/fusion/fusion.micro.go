// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: github.com/stanchan/fusion-solr/proto/fusion/fusion.proto

/*
Package go_micro_srv_fusion is a generated protocol buffer package.

It is generated from these files:
	github.com/stanchan/fusion-solr/proto/fusion/fusion.proto

It has these top-level messages:
	Message
	Request
	Response
	StreamingRequest
	StreamingResponse
	Ping
	Pong
*/
package go_micro_srv_fusion

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Fusion service

type FusionService interface {
	Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (Fusion_StreamService, error)
	PingPong(ctx context.Context, opts ...client.CallOption) (Fusion_PingPongService, error)
}

type fusionService struct {
	c           client.Client
	serviceName string
}

func NewFusionService(serviceName string, c client.Client) FusionService {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "go.micro.srv.fusion"
	}
	return &fusionService{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *fusionService) Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "Fusion.Call", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fusionService) Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (Fusion_StreamService, error) {
	req := c.c.NewRequest(c.serviceName, "Fusion.Stream", &StreamingRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &fusionStreamService{stream}, nil
}

type Fusion_StreamService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*StreamingResponse, error)
}

type fusionStreamService struct {
	stream client.Stream
}

func (x *fusionStreamService) Close() error {
	return x.stream.Close()
}

func (x *fusionStreamService) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *fusionStreamService) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *fusionStreamService) Recv() (*StreamingResponse, error) {
	m := new(StreamingResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fusionService) PingPong(ctx context.Context, opts ...client.CallOption) (Fusion_PingPongService, error) {
	req := c.c.NewRequest(c.serviceName, "Fusion.PingPong", &Ping{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &fusionPingPongService{stream}, nil
}

type Fusion_PingPongService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Ping) error
	Recv() (*Pong, error)
}

type fusionPingPongService struct {
	stream client.Stream
}

func (x *fusionPingPongService) Close() error {
	return x.stream.Close()
}

func (x *fusionPingPongService) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *fusionPingPongService) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *fusionPingPongService) Send(m *Ping) error {
	return x.stream.Send(m)
}

func (x *fusionPingPongService) Recv() (*Pong, error) {
	m := new(Pong)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Fusion service

type FusionHandler interface {
	Call(context.Context, *Request, *Response) error
	Stream(context.Context, *StreamingRequest, Fusion_StreamStream) error
	PingPong(context.Context, Fusion_PingPongStream) error
}

func RegisterFusionHandler(s server.Server, hdlr FusionHandler, opts ...server.HandlerOption) {
	type fusion interface {
		Call(ctx context.Context, in *Request, out *Response) error
		Stream(ctx context.Context, stream server.Stream) error
		PingPong(ctx context.Context, stream server.Stream) error
	}
	type Fusion struct {
		fusion
	}
	h := &fusionHandler{hdlr}
	s.Handle(s.NewHandler(&Fusion{h}, opts...))
}

type fusionHandler struct {
	FusionHandler
}

func (h *fusionHandler) Call(ctx context.Context, in *Request, out *Response) error {
	return h.FusionHandler.Call(ctx, in, out)
}

func (h *fusionHandler) Stream(ctx context.Context, stream server.Stream) error {
	m := new(StreamingRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.FusionHandler.Stream(ctx, m, &fusionStreamStream{stream})
}

type Fusion_StreamStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*StreamingResponse) error
}

type fusionStreamStream struct {
	stream server.Stream
}

func (x *fusionStreamStream) Close() error {
	return x.stream.Close()
}

func (x *fusionStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *fusionStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *fusionStreamStream) Send(m *StreamingResponse) error {
	return x.stream.Send(m)
}

func (h *fusionHandler) PingPong(ctx context.Context, stream server.Stream) error {
	return h.FusionHandler.PingPong(ctx, &fusionPingPongStream{stream})
}

type Fusion_PingPongStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Pong) error
	Recv() (*Ping, error)
}

type fusionPingPongStream struct {
	stream server.Stream
}

func (x *fusionPingPongStream) Close() error {
	return x.stream.Close()
}

func (x *fusionPingPongStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *fusionPingPongStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *fusionPingPongStream) Send(m *Pong) error {
	return x.stream.Send(m)
}

func (x *fusionPingPongStream) Recv() (*Ping, error) {
	m := new(Ping)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
